from typing import *
from Tree import *

class UnionFind:
    def __init__(self):
        self.parent = {}

    def find(self, u):
        if u != self.parent.setdefault(u, u):
            self.parent[u] = self.find(self.parent[u])  # Path compression
        return self.parent[u]

    def union(self, u, v):
        pu, pv = self.find(u), self.find(v)
        if pu != pv:
            self.parent[pu] = pv


# class Solution:
#     def countPoints(self, rings: str) -> int:
#         ans = 0
#         dp = {i: set() for i in range(10)}
#
#         for i in range(len(rings) // 2):
#             c = rings[i * 2]
#             idx = int(rings[i * 2 + 1])
#             dp[idx].add(c)
#
#         for i in range(10):
#             if 'R' in dp[i] and 'G' in dp[i] and 'B' in dp[i]:
#                 ans += 1
#
#         return ans

# class Solution:
#     def subArrayRanges(self, nums: List[int]) -> int:
#         ans = 0
#         for i in range(len(nums)):
#             mx = nums[i]
#             mi = nums[i]
#             for j in range(i, len(nums)):
#                 mx = max(mx, nums[j])
#                 mi = min(mi, nums[j])
#                 ans += mx - mi
#         return ans


# class Solution:
#     def minimumRefill(self, plants: List[int], capacityA: int, capacityB: int) -> int:
#         n = len(plants)
#         end = n // 2
#
#         ans = 0
#         A = capacityA
#         B = capacityB
#
#         for i in range(end):
#             if A < plants[i]:
#                 ans += 1
#                 A = capacityA
#             A -= plants[i]
#
#         b_need = end
#         j = n - 1
#         while b_need > 0:
#             if B < plants[j]:
#                 ans += 1
#                 B = capacityB
#             B -= plants[j]
#             j -= 1
#             b_need -= 1
#
#         if n % 2 != 0:
#             if max(A, B) < plants[end]:
#                 ans += 1
#         return ans
#
#
# s = Solution()
#
# plants = [83,508,17,47,273]
# capacityA = 644
# capacityB = 545
# print(s.minimumRefill(plants, capacityA, capacityB))


class Solution:
    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:
        right = 2 * 10**5 + 1

        ans = [0 for i in range(right + 2)]
        # range: i, j = ans[j + 1] - ans[i]
        # 0|0 = 1-0, 0 | n = n + 1 - 0

        j = 0
        for i in range(1, right + 2):
            if j < len(fruits) and fruits[j][0] == i - 1:
                ans[i] = ans[i - 1] + fruits[j][1]
                j += 1
            else:
                ans[i] = ans[i - 1]

        # print(ans)

        ret = 0
        for i in range(fruits[0][0], fruits[-1][0] + 1):
            if i <= startPos:
                if startPos - i > k:
                    continue
                left_most = i
                rest = k - (startPos - i) * 2
                if rest < 0:
                    right_most = startPos
                else:
                    right_most = min(startPos + rest, right)
                ret = max(ret, ans[right_most + 1] - ans[left_most])

            else: #i > startPos:
                if i - startPos > k:
                    continue
                right_most = i
                rest = k - (i - startPos) * 2
                if rest < 0:
                    left_most = startPos
                else:
                    left_most = max(0, startPos - rest)
                ret = max(ret, ans[right_most + 1] - ans[left_most])

            # print(i, left_most, right_most)

        return ret

f = [[2,8],[6,3],[8,6]]
st = 5
k = 4

f = [[0,10000]]
st = 200000
k = 200000

f = [[195006,9681],[195007,735],[195012,2864],[195016,3582],[195019,1866],[195023,1869],[195025,7212],[195030,251],[195033,1249],[195037,8934],[195044,6474],[195045,3048],[195051,219],[195059,8539],[195067,2418],[195069,7098],[195090,6304],[195091,9291],[195092,3638],[195094,9056],[195101,6964],[195102,6502],[195111,678],[195114,31],[195119,3868],[195120,4913],[195127,6552],[195139,2826],[195140,9675],[195141,2889],[195158,1198],[195164,1216],[195170,1162],[195172,1287],[195190,3854],[195193,886],[195201,6941],[195207,1423],[195209,7196],[195217,31],[195219,2287],[195241,9437],[195254,4129],[195255,8675],[195265,8753],[195285,8832],[195288,3782],[195301,2335],[195309,8223],[195312,4012],[195318,3707],[195327,5441],[195328,6875],[195332,2687],[195337,6143],[195345,6741],[195351,9236],[195352,9219],[195355,5506],[195358,6312],[195359,4222],[195362,2900],[195367,229],[195369,4954],[195375,6393],[195384,6075],[195388,4724],[195396,4633],[195402,9198],[195406,5754],[195415,1613],[195418,1110],[195419,3865],[195434,1153],[195441,2700],[195442,7999],[195443,943],[195445,4523],[195448,7225],[195449,9547],[195450,8801],[195464,5642],[195466,909],[195471,557],[195485,1000],[195487,6869],[195491,9040],[195497,7370],[195498,3191],[195510,5051],[195511,644],[195515,8992],[195517,3002],[195518,6338],[195521,1225],[195531,9642],[195533,6294],[195538,9710],[195543,4019],[195549,7280],[195551,3404],[195553,9699],[195557,604],[195581,8364],[195585,9059],[195591,2441],[195601,9168],[195602,6841],[195605,2609],[195613,2685],[195621,7637],[195627,59],[195628,1287],[195632,8107],[195635,7645],[195638,4288],[195644,4700],[195648,2663],[195658,9129],[195659,271],[195662,477],[195673,4563],[195677,7563],[195698,3957],[195699,2199],[195703,9107],[195704,2609],[195710,881],[195718,5625],[195732,5203],[195736,5110],[195737,5002],[195739,2797],[195746,7735],[195753,8275],[195761,2312],[195765,2465],[195768,4712],[195769,1847],[195776,4567],[195780,2077],[195789,4913],[195794,1493],[195798,7190],[195809,4178],[195813,2646],[195823,861],[195828,8706],[195835,7414],[195847,742],[195849,4147],[195850,3809],[195856,5447],[195862,7654],[195872,4720],[195879,6218],[195885,7728],[195890,791],[195891,5236],[195894,4097],[195897,2455],[195906,8469],[195908,2951],[195912,828],[195914,9757],[195927,3454],[195928,7703],[195935,441],[195939,8811],[195942,2632],[195945,9446],[195947,1104],[195951,2777],[195954,3671],[195956,1497],[195960,8950],[195963,4737],[195965,7703],[195974,6106],[195991,247],[196006,44],[196014,8403],[196026,3058],[196032,9163],[196036,9524],[196038,7291],[196055,3711],[196060,1096],[196063,8905],[196075,7893],[196088,3378],[196089,7963],[196091,6494],[196100,5374],[196108,4920],[196115,9402],[196117,9238],[196121,3600],[196127,7884],[196145,7594],[196147,7789],[196153,788],[196157,6918],[196158,1720],[196167,3345],[196171,8037],[196172,8786],[196174,2915],[196187,7207],[196188,793],[196192,9466],[196193,8030],[196196,2034],[196198,6747],[196201,6136],[196213,1554],[196217,7783],[196221,4896],[196224,9269],[196229,3012],[196235,3300],[196246,9832],[196254,2787],[196257,9782],[196260,6002],[196265,5250],[196266,8263],[196270,6120],[196279,6024],[196280,6361],[196282,4539],[196288,7569],[196295,5415],[196297,8747],[196302,9464],[196307,695],[196312,1200],[196323,2497],[196325,942],[196326,1158],[196327,9329],[196330,4835],[196334,3900],[196336,3513],[196361,8449],[196369,3993],[196373,320],[196383,6123],[196386,8874],[196393,1299],[196395,5093],[196405,2384],[196407,1855],[196416,8480],[196420,6981],[196422,957],[196423,2222],[196433,7042],[196435,7310],[196437,9567],[196444,3332],[196457,9483],[196458,3591],[196463,1371],[196466,76],[196479,4288],[196480,8927],[196487,392],[196498,2693],[196499,5907],[196503,7787],[196518,2438],[196519,3071],[196520,1225],[196521,9801],[196524,7411],[196526,28],[196527,5675],[196529,671],[196539,2436],[196542,8850],[196562,2285],[196565,9257],[196567,5170],[196582,4016],[196585,3149],[196590,8255],[196606,1446],[196609,6846],[196626,659],[196628,3581],[196629,1080],[196635,1442],[196636,909],[196638,8740],[196641,7363],[196642,7773],[196646,6970],[196651,9666],[196662,9456],[196672,6394],[196674,6776],[196682,3031],[196684,3453],[196691,8723],[196697,9941],[196704,8940],[196706,6584],[196707,9882],[196723,5076],[196729,3049],[196741,8597],[196742,3450],[196747,3847],[196751,1574],[196754,124],[196756,6364],[196761,5662],[196765,7687],[196766,1735],[196783,367],[196788,956],[196797,3056],[196798,6996],[196801,107],[196807,1722],[196833,2015],[196834,816],[196837,9667],[196840,6117],[196843,511],[196853,196],[196856,2256],[196859,9471],[196860,2057],[196869,6906],[196884,8292],[196885,4607],[196890,4541],[196891,3243],[196895,7816],[196897,1630],[196903,3628],[196904,7722],[196915,9069],[196916,9164],[196921,3530],[196927,588],[196933,877],[196934,5959],[196958,4246],[196968,4907],[196978,9988],[196988,743],[197023,5678],[197036,2952],[197038,1303],[197042,7302],[197043,8864],[197046,5926],[197049,8175],[197061,3057],[197064,8422],[197071,6661],[197072,6921],[197074,5311],[197075,9602],[197080,8366],[197081,6130],[197083,7297],[197086,9302],[197089,8353],[197105,2347],[197114,8723],[197124,433],[197126,2201],[197132,9403],[197134,3763],[197136,6592],[197148,5251],[197158,8221],[197161,4139],[197165,3892],[197167,8220],[197168,3620],[197174,1674],[197186,2016],[197190,9236],[197195,9257],[197198,6459],[197201,4535],[197202,7720],[197220,8057],[197229,16],[197236,1777],[197238,6547],[197244,2796],[197257,4625],[197260,3621],[197262,3964],[197267,2044],[197269,1038],[197272,4183],[197274,850],[197277,798],[197285,1802],[197292,2223],[197302,7843],[197305,1112],[197310,774],[197311,9995],[197312,9860],[197313,7422],[197318,4010],[197321,1496],[197330,5316],[197334,3365],[197335,6333],[197342,8766],[197362,8335],[197368,1408],[197374,8895],[197377,8005],[197390,8469],[197396,5848],[197405,7429],[197409,9123],[197412,880],[197418,2205],[197440,7687],[197460,252],[197463,9291],[197465,8229],[197467,1835],[197493,9248],[197494,198],[197503,1466],[197505,8038],[197508,6652],[197512,2539],[197518,9238],[197520,5468],[197527,5098],[197529,629],[197533,4203],[197542,8832],[197543,6654],[197544,3083],[197548,74],[197553,5501],[197555,4289],[197556,3284],[197558,9669],[197560,1814],[197561,2112],[197565,345],[197576,7322],[197586,1370],[197591,2483],[197596,9460],[197600,6344],[197601,2108],[197612,8436],[197617,2483],[197629,4260],[197630,4048],[197638,7071],[197640,9967],[197641,5406],[197642,9921],[197657,2860],[197658,876],[197666,7930],[197669,8019],[197670,8780],[197671,8665],[197690,35],[197697,3749],[197699,4520],[197704,6601],[197705,2428],[197717,3695],[197720,6195],[197723,8815],[197724,3669],[197735,8125],[197737,4653],[197745,2578],[197748,1013],[197792,2441],[197801,8382],[197812,7796],[197813,8694],[197814,6966],[197819,5571],[197825,1157],[197853,9453],[197854,3967],[197858,968],[197863,4288],[197864,6947],[197867,1073],[197868,836],[197871,3256],[197875,5603],[197885,8594],[197895,2098],[197904,7786],[197916,5945],[197928,4765],[197930,770],[197931,3048],[197932,4098],[197939,9689],[197949,3869],[197950,8900],[197957,7487],[197959,2637],[197961,5837],[197975,1707],[197976,5839],[197989,241],[197993,1808],[197994,6781],[197996,6668],[197999,2369],[198003,1628],[198004,3088],[198026,7807],[198039,3908],[198040,9965],[198050,8795],[198051,5023],[198060,1209],[198066,3343],[198075,9868],[198077,4867],[198093,8906],[198105,5904],[198110,2],[198122,6813],[198124,343],[198154,2466],[198157,3688],[198159,1483],[198163,3567],[198164,273],[198172,9032],[198173,1038],[198178,7250],[198183,435],[198187,2209],[198193,8448],[198196,398],[198201,389],[198202,7596],[198207,6815],[198211,4574],[198215,7984],[198219,6481],[198223,3383],[198239,6033],[198240,7931],[198251,2662],[198254,6549],[198256,4125],[198271,6696],[198283,7739],[198287,4770],[198291,4810],[198299,3981],[198301,7005],[198302,7096],[198314,2542],[198318,5652],[198320,2312],[198327,237],[198330,4658],[198340,5247],[198343,8043],[198344,6614],[198345,5928],[198363,5339],[198372,8335],[198380,169],[198386,8608],[198401,7451],[198402,5733],[198408,1062],[198411,6368],[198426,7389],[198427,5545],[198428,8772],[198429,7512],[198436,4796],[198438,7641],[198441,102],[198446,9932],[198447,536],[198458,6734],[198464,1639],[198465,3237],[198466,3052],[198467,5125],[198469,1812],[198476,9411],[198477,3400],[198486,6243],[198492,6669],[198496,5304],[198509,2589],[198512,8983],[198516,6935],[198520,8752],[198522,1739],[198536,1265],[198541,1420],[198542,1443],[198558,3586],[198565,5145],[198580,8729],[198583,2686],[198590,983],[198591,528],[198593,7247],[198594,3417],[198611,1240],[198619,3470],[198633,1981],[198649,8746],[198662,2071],[198663,6935],[198667,5903],[198670,9343],[198671,3246],[198677,6904],[198682,7432],[198689,4019],[198692,3558],[198700,5174],[198701,390],[198702,6354],[198703,6739],[198705,3656],[198706,6030],[198711,4820],[198714,5403],[198720,4506],[198721,3125],[198733,1158],[198734,9425],[198740,1594],[198744,3587],[198748,5504],[198750,3170],[198751,8187],[198752,174],[198754,9862],[198772,4501],[198793,6345],[198809,6521],[198817,3490],[198830,24],[198834,9727],[198841,2981],[198844,3888],[198847,7738],[198848,610],[198853,9674],[198865,1585],[198868,7128],[198870,4186],[198871,4265],[198874,8563],[198883,590],[198886,2632],[198890,172],[198892,2370],[198901,6429],[198903,9143],[198912,2806],[198916,3415],[198917,1996],[198922,2684],[198924,7742],[198935,4607],[198939,720],[198942,8300],[198945,4561],[198952,9760],[198957,8802],[198968,2182],[198972,7623],[198975,871],[198977,2503],[198998,1993],[199003,1709],[199009,2287],[199011,2771],[199040,4765],[199044,7987],[199055,9010],[199058,7631],[199059,6794],[199072,9466],[199074,7236],[199080,4541],[199087,622],[199088,4123],[199093,950],[199101,4228],[199103,4095],[199107,26],[199118,4200],[199122,9563],[199130,5907],[199132,4882],[199135,5468],[199141,6972],[199145,5922],[199150,128],[199152,4410],[199160,8961],[199170,1684],[199173,1608],[199190,771],[199199,956],[199201,7141],[199217,7038],[199221,4774],[199227,7953],[199237,6022],[199238,3914],[199246,8576],[199263,9300],[199267,741],[199271,3482],[199274,9460],[199277,4353],[199281,4972],[199299,9990],[199301,1210],[199312,7758],[199321,3302],[199324,7925],[199329,6970],[199335,6811],[199346,791],[199349,4141],[199350,4918],[199359,711],[199362,5099],[199368,6532],[199373,6286],[199385,7818],[199404,9142],[199405,8928],[199407,7716],[199413,9401],[199424,1867],[199427,8650],[199439,9482],[199442,4704],[199448,4438],[199450,2404],[199451,1676],[199459,7602],[199461,4530],[199463,1310],[199467,7225],[199474,6276],[199478,8229],[199481,1033],[199486,8358],[199487,656],[199503,2848],[199508,6855],[199510,5134],[199511,3360],[199527,3684],[199529,909],[199530,5272],[199542,3836],[199543,1449],[199546,2067],[199547,545],[199550,4359],[199555,6566],[199565,5680],[199568,4038],[199570,8027],[199574,2004],[199584,3737],[199602,8656],[199605,7770],[199608,9549],[199615,849],[199623,2393],[199627,9823],[199631,8694],[199633,896],[199635,3755],[199649,4929],[199650,2944],[199651,1215],[199655,6087],[199667,1403],[199672,823],[199674,7960],[199678,2192],[199679,2243],[199683,721],[199685,7028],[199687,2835],[199693,3411],[199703,1295],[199706,5185],[199708,6472],[199714,4091],[199717,3037],[199719,4882],[199725,5583],[199726,6707],[199735,6975],[199739,8515],[199743,1480],[199754,2115],[199761,3307],[199767,6337],[199772,6526],[199776,8142],[199781,1598],[199782,9273],[199788,5091],[199789,2503],[199795,1281],[199797,9716],[199801,8128],[199803,4991],[199812,3810],[199815,8905],[199816,7471],[199830,3055],[199838,1953],[199841,7135],[199854,2333],[199857,7464],[199870,9881],[199873,5338],[199890,5470],[199906,6728],[199910,6947],[199913,9961],[199932,3750],[199935,9005],[199936,5393],[199943,2451],[199947,609],[199952,573],[199960,3243],[199962,9590],[199965,4878],[199972,8262],[199974,8571],[199978,9914],[199995,3000]]
st = 198972
k = 5733

s = Solution()
print(s.maxTotalFruits(f, st, k))




















